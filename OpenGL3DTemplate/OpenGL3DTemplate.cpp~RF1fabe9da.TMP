#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <glut.h>

#define GLUT_KEY_ESCAPE 27
#define DEG2RAD(a) (a * 0.0174532925)

#ifndef M_PI
#define M_PI 3.14159265358979323846264338327950288
#endif

class Vector3f {
public:
	float x, y, z;

	Vector3f(float _x = 0.0f, float _y = 0.0f, float _z = 0.0f) {
		x = _x;
		y = _y;
		z = _z;
	}

	Vector3f operator+(Vector3f& v) {
		return Vector3f(x + v.x, y + v.y, z + v.z);
	}

	Vector3f operator-(Vector3f& v) {
		return Vector3f(x - v.x, y - v.y, z - v.z);
	}

	Vector3f operator*(float n) {
		return Vector3f(x * n, y * n, z * n);
	}

	Vector3f operator/(float n) {
		return Vector3f(x / n, y / n, z / n);
	}

	Vector3f unit() {
		return *this / sqrt(x * x + y * y + z * z);
	}

	Vector3f cross(Vector3f v) {
		return Vector3f(y * v.z - z * v.y, z * v.x - x * v.z, x * v.y - y * v.x);
	}
};

class Camera {
public:
	Vector3f eye, center, up;

	Camera(float eyeX = 3.0f, float eyeY = 3.0f, float eyeZ = 3.0f, float centerX = 2.0f, float centerY = 0.0f, float centerZ = 2.0f, float upX = 0.0f, float upY = 1.0f, float upZ = 0.0f) {
		eye = Vector3f(eyeX, eyeY, eyeZ);
		center = Vector3f(centerX, centerY, centerZ);
		up = Vector3f(upX, upY, upZ);
	}

	void moveX(float d) {
		Vector3f right = up.cross(center - eye).unit();
		eye = eye + right * d;
		center = center + right * d;
	}

	void moveY(float d) {
		eye = eye + up.unit() * d;
		center = center + up.unit() * d;
	}

	void moveZ(float d) {
		Vector3f view = (center - eye).unit();
		eye = eye + view * d;
		center = center + view * d;
	}

	void rotateX(float a) {
		Vector3f view = (center - eye).unit();
		Vector3f right = up.cross(view).unit();
		view = view * cos(DEG2RAD(a)) + up * sin(DEG2RAD(a));
		up = view.cross(right);
		center = eye + view;
	}

	void rotateY(float a) {
		Vector3f view = (center - eye).unit();
		Vector3f right = up.cross(view).unit();
		view = view * cos(DEG2RAD(a)) + right * sin(DEG2RAD(a));
		right = view.cross(up);
		center = eye + view;
	}

	void look() {
		gluLookAt(
			eye.x, eye.y, eye.z,
			center.x, center.y, center.z,
			up.x, up.y, up.z
		);
	}

	void setFrontView() {
		eye = Vector3f(1.0f, 1.0f, 2.0f);
		center = Vector3f(1.0f, 1.0f, 0.0f);
		up = Vector3f(0.0f, 1.0f, 0.0f);


		// Rotate the view to the left
		float angle = 90.0f; // Adjust the angle as needed
		Vector3f view = (center - eye).unit();
		Vector3f right = up.cross(view).unit();
		view = view * cos(DEG2RAD(angle)) + right * sin(DEG2RAD(angle));
		up = view.cross(right);
		center = eye + view;
	}


	void setTopView() {
		eye = Vector3f(1.0f, 3.0f, 1.0f);
		center = Vector3f(1.0f, 0.0f, 1.0f);
		up = Vector3f(0.0f, 0.0f, -1.0f);
	}

	void setSideView() {
		eye = Vector3f(1.0f, 1.0f, 2.0f);
		center = Vector3f(1.0f, 1.0f, 0.0f);
		up = Vector3f(0.0f, 1.0f, 0.0f);

		// Rotate the view to the left
		float angle = 30.0f; // Adjust the angle as needed
		Vector3f view = (center - eye).unit();
		Vector3f right = up.cross(view).unit();
		view = view * cos(DEG2RAD(angle)) + right * sin(DEG2RAD(angle));
		up = view.cross(right);
		center = eye + view;
	}
};

class Player {
public:
	Vector3f position;
	float scale;

	Player(float x = 2.0f, float y = 0.0f, float z = 2.0f, float s = 0.5f) {
		position = Vector3f(x, y, z);
		scale = s;
	}

	void draw() {
		// Draw head
		glPushMatrix();
		glColor3f(1.0f, 0.8f, 0.6f);
		glTranslated(position.x, position.y + 1.0, position.z);
		glutSolidSphere(scale * 0.2, 15, 15);
		glPopMatrix();

		// Draw body
		glPushMatrix();
		glColor3f(0.8f, 0.4f, 0.9f);
		glTranslated(position.x, position.y + 0.6, position.z);
		glScaled(scale * 0.75, scale * 1.2, scale * 0.5);
		glutSolidCube(1);
		glPopMatrix();

		// Draw limbs
		glPushMatrix();
		glColor3f(1.0f, 0.8f, 0.6f);
		glTranslated(position.x - scale * 0.3, position.y + 0.65, position.z);
		glScaled(scale * 0.75 , scale * 0.1, scale * 0.1);
		glutSolidCube(1);
		glPopMatrix();

		glPushMatrix();
		glColor3f(1.0f, 0.8f, 0.6f);
		glTranslated(position.x + scale * 0.3, position.y + 0.65, position.z);
		glScaled(scale * 0.75, scale * 0.1, scale * 0.1);
		glutSolidCube(1);
		glPopMatrix();

		glPushMatrix();
		glColor3f(1.0f, 0.8f, 0.6f);
		glTranslated(position.x - 0.1, position.y + 0.3, position.z + scale * 0.3);
		glScaled(scale * 0.1, scale * 0.1, scale * 0.5);
		glutSolidCube(1);
		glPopMatrix();

		glPushMatrix();
		glColor3f(1.0f, 0.8f, 0.6f);
		glTranslated(position.x + 0.1, position.y + 0.3, position.z + scale * 0.3);
		glScaled(scale * 0.1, scale * 0.1, scale * 0.5);
		glutSolidCube(1);
		glPopMatrix();
	}

	void moveX(float d) {
		position.x += d;
	}

	void moveY(float d) {
		position.y += d;
	}

	void moveZ(float d) {
		position.z += d;
	}
};

Player player;
Camera camera;


void drawPlayer() {
	player.draw();
}


void drawCylinder(float radius, float height, int sides) {
	glBegin(GL_QUAD_STRIP);
	for (int i = 0; i <= sides; ++i) {
		float theta = i * 2.0f * M_PI / sides;
		float x = radius * cos(theta);
		float y = radius * sin(theta);

		glVertex3f(x, y, 0.0f);
		glVertex3f(x, y, height);
	}
	glEnd();
}

void drawWheelSupport(float radius, float height, int sides) {
	glPushMatrix();
	drawCylinder(radius, height, sides);
	glPopMatrix();
}

void drawFerrisWheel() {
	int sides = 100;
	float wheelRadius = 0.9f;
	float cabinRadius = 0.4f;
	float cabinHeight = 0.6f;
	float supportHeight = 3.0f;

	
	glPushMatrix();
	glTranslated(0.0, 0.0, -1.0);
	// Draw Ferris wheel support structure
	glPushMatrix();
	glColor3f(1.0f, 1.0f, 0.5f);
	glTranslated(-1.0, 0.0, 1.4);
	drawWheelSupport(0.1f, supportHeight*0.1, sides);
	glPopMatrix();


	// Draw Ferris wheel wheel
	glColor3f(0.2f, 0.6f, 0.8f);
	glPushMatrix();
	glTranslatef(-1.0f, 1.0f, supportHeight-1.55);
	drawCylinder(wheelRadius, 0.2f, sides);
	glPopMatrix();


	// Draw lines from top of the cylinder to the bottom
	glBegin(GL_LINES);
	for (int i = 0; i <= sides; ++i) {
		float theta = i * 2.0f * M_PI / sides;
		float x = wheelRadius * cos(theta);
		float y = wheelRadius * sin(theta);

		glVertex3f(-1.0f + x, 1.0f + y, supportHeight - 1.35);
		glVertex3f(-1.0f, 1.0f, supportHeight - 1.35);
	}
	glEnd();

	glPopMatrix();
}

void drawWall(double thickness) {
	// Draw the first cube
	
	glPushMatrix();
	glColor3f(1.0f, 0.5f, 0.5f);
	glTranslated(0.5, 0.5 * thickness, 0.5);
	glScaled(1.0, thickness, 1.0);
	glutSolidCube(1);
	glPopMatrix();

	glPushMatrix();
	glColor3f(0.8f, 0.4f, 0.9f);
	glTranslated(1.0, 0.5 * thickness, 0.5);
	glScaled(1.0, thickness, 1.0);
	glRotated(45, 0, 0, 0);
	glutSolidCube(1);
	glPopMatrix();


}



void drawSeesaw() {
	// Draw the main beam (cylinder)
	glColor3f(1.0f, 1.0f, 0.5f);
	glPushMatrix();
	glTranslatef(0.0f, -1.6f, 0.0f);
	glRotatef(90.0f, 1.0f, 0.0f, 0.0f); // Rotate the cylinder to stand upright
	drawCylinder(0.1, 0.4, 50);
	glPopMatrix();

	// Draw the seesaw plank (cuboid)
	glColor3f(0.2f, 0.6f, 0.8f);
	glPushMatrix();
	glTranslatef(0.0f, -1.6f, 0.0f); // Position the plank above the center
	glScalef(2.0, 0.2, 0.5); // Scale the cuboid to create the plank
	glutSolidCube(1.0);
	glPopMatrix();

	// Draw the left support (cuboid)
	glColor3f(1.0f, 1.0f, 0.5f);
	glPushMatrix();
	glTranslatef(-0.6f, -1.4f, 0.0f); // Position the left support
	glScalef(0.1, 1.0, 0.1); // Scale the cuboid to create the support
	glutSolidCube(1.0);
	glPopMatrix();

	// Draw the right support (cuboid)
	glColor3f(1.0f, 1.0f, 0.5f);
	glPushMatrix();
	glTranslatef(0.6f, -1.4f, 0.0f); // Position the right support
	glScalef(0.1, 1.0, 0.1); // Scale the cuboid to create the support
	glRotated(90, 1.0, 0.0, 0.0);
	glutSolidCube(1.0);
	glPopMatrix();

	// Draw the left handle (cylinder)
	glColor3f(0.2f, 0.2f, 0.8f);
	glPushMatrix();
	glTranslatef(-0.8f, 2.3f, 0.2f); // Position the left handle
	glRotatef(90.0f, 0.0f, 1.0f, 0.0f); // Rotate the cylinder to stand upright
	drawCylinder(0.05, 0.8, 50);
	glPopMatrix();

	//// Draw the right handle (cylinder)
	//glColor3f(0.2f, 0.2f, 0.8f);
	//glPushMatrix();
	//glTranslatef(0.8f, 2.3f, 0.2f); // Position the right handle
	//glRotatef(90.0f, 0.0f, 1.0f, 0.0f); // Rotate the cylinder to stand upright
	//drawCylinder(0.05, 0.8, 50);
	//glPopMatrix();
}









void setupLights() {
	// Material properties
	GLfloat ambient[] = { 0.9f, 0.9f, 0.9f, 1.0f };
	GLfloat diffuse[] = { 0.8f, 0.8f, 0.8f, 1.0f };
	GLfloat specular[] = { 1.0f, 1.0f, 1.0f, 1.0f };
	GLfloat shininess[] = { 50.0f };
	glMaterialfv(GL_FRONT_AND_BACK, GL_AMBIENT, ambient);
	glMaterialfv(GL_FRONT_AND_BACK, GL_DIFFUSE, diffuse);
	glMaterialfv(GL_FRONT_AND_BACK, GL_SPECULAR, specular);
	glMaterialfv(GL_FRONT_AND_BACK, GL_SHININESS, shininess);

	// Light properties
	GLfloat lightIntensity[] = { 1.0f, 1.0f, 1.0f, 1.0f }; // Increased intensity
	GLfloat lightPosition[] = { -7.0f, 6.0f, 3.0f, 0.0f };
	glLightfv(GL_LIGHT0, GL_POSITION, lightPosition);
	glLightfv(GL_LIGHT0, GL_DIFFUSE, lightIntensity);
	glLightfv(GL_LIGHT0, GL_SPECULAR, lightIntensity);

	// Enable lighting and light 0
	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);
	glEnable(GL_NORMALIZE);  // Enable normalization of normals for proper lighting
}

void setupCamera() {
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(60, 1200 / 750, 0.001, 100);

	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	camera.look();
}



void Display() {
	setupCamera();
	setupLights();

	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	/*glPushMatrix();
	glTranslated(0.4, 0.4, 0.6);
	glRotated(45, 0, 0, 1);
	glScaled(0.08, 0.08, 0.08);
	drawJack();
	glPopMatrix();


	glPushMatrix();
	glTranslated(0.6, 0.38, 0.5);
	glRotated(30, 0, 1, 0);
	glutSolidTeapot(0.08);
	glPopMatrix();


	glPushMatrix();
	glTranslated(0.25, 0.42, 0.35);
	glutSolidSphere(0.1, 15, 15);
	glPopMatrix();


	glPushMatrix();
	glTranslated(0.4, 0.0, 0.4);
	drawTable(0.6, 0.02, 0.02, 0.3);
	glPopMatrix();*/

	drawPlayer();  // Draw the player

	glPushMatrix();
	glTranslated(2.0, 0.0, 0.0);
	drawFerrisWheel();
	glPopMatrix();

	glPushMatrix();
	glTranslated(3.5, 2.0, 0.5);
	drawSeesaw();
	glPopMatrix();

	glPushMatrix();
	glScaled(5.0, 1.0, 5.0);
	drawWall(0.02);
	glPopMatrix();

	glPushMatrix();
	glScaled(1.0, 3.0, 5.0);
	glRotated(90, 0, 0, 1.0);
	drawWall(0.02);
	glPopMatrix();


	glPushMatrix();
	glScaled(5.0, 3.0, 1.0);
	glRotated(-90, 1.0, 0.0, 0.0);
	drawWall(0.02);
	glPopMatrix();


	glPushMatrix();
	glScaled(5.0, 3.0, 1.0);
	glTranslated(0.0, 0.0, 5.0);
	glRotated(-90, 1.0, 0.0, 0.0);
	drawWall(0.02);
	glPopMatrix();
	



	glFlush();
}

void Keyboard(unsigned char key, int x, int y) {
	float d = 0.05;

	switch (key) {
	case 't': //top
		camera.setTopView();
		break;
	case 's': //side
		camera.setSideView();
		break;
	case 'f': //front
		camera.setFrontView();
		break;
	case 'u':
		camera.moveY(d);
		break;
	case 'd':
		camera.moveY(-d);
		break;
	case 'r':
		camera.moveX(d);
		break;
	case 'l':
		camera.moveX(-d);
		break;
	case 'c':
		camera.moveZ(d);
		break;
	case 'b':
		camera.moveZ(-d);	
		break;
	case 'x':
		player.moveX(d);
		break;
	case 'w':
		player.moveX(-d);
		break;
	case 'y':
		player.moveY(d);
		break;
	case 'a':
		player.moveY(-d);
		break;
	case 'z':
		player.moveZ(d);
		break;
	case 'p':
		player.moveZ(-d);
		break;
	case GLUT_KEY_ESCAPE:
		exit(EXIT_SUCCESS);
	}
	setupCamera();
	
	glutPostRedisplay();
}
void Special(int key, int x, int y) {
	float a = 2.0;

	switch (key) {
	case GLUT_KEY_UP:
		camera.rotateX(a);
		break;
	case GLUT_KEY_DOWN:
		camera.rotateX(-a);
		break;
	case GLUT_KEY_LEFT:
		camera.rotateY(a);
		break;
	case GLUT_KEY_RIGHT:
		camera.rotateY(-a);
		break;
	}

	glutPostRedisplay();
}

void main(int argc, char** argv) {
	glutInit(&argc, argv);

	glutInitWindowSize(1200, 750);
	glutInitWindowPosition(50, 50);

	glutCreateWindow("Amusement Park");
	glutDisplayFunc(Display);
	glutKeyboardFunc(Keyboard);
	glutSpecialFunc(Special);

	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB | GLUT_DEPTH);
	glClearColor(1.0f, 1.0f, 1.0f, 0.0f);

	glEnable(GL_DEPTH_TEST);
	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);
	glEnable(GL_NORMALIZE);
	glEnable(GL_COLOR_MATERIAL);

	glShadeModel(GL_SMOOTH);

	glutMainLoop();
}
